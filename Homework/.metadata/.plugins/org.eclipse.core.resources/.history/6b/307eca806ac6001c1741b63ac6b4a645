package hw4;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;

public class Graph<NodeL, EdgeW> {
	private HashMap<NodeL, HashSet<Edge<NodeL, EdgeW>>> adjacencyList;
	private int numOfNodes;
	/*
	 * Abstraction Function
	 * A graph is represented by the adjacency list, which is a hashmap with the nodes (keys) mapping to the edges (values).
	 * The edges are contained in a hashset to avoid duplicate edges in the adjacency list. 
	 * The hashmap implementation also does not allow for duplicate nodes.
	 * No edges or nodes may be null values.
	 */
	public Graph() {
		this.numOfNodes = 0;
		this.adjacencyList = new HashMap<NodeL, HashSet<Edge<NodeL, EdgeW>>>();
		// this.checkRep();
	}
	private void checkRep(){
        HashSet<NodeL> nodes = new HashSet<NodeL>();
        HashSet<Edge<NodeL, EdgeW>> edges = new HashSet<Edge<NodeL, EdgeW>>();

        for (NodeL vertex: this.adjacencyList.keySet()) {
        	if (!nodes.add(vertex)) {
        		throw new RuntimeException("Failed rep check as there is a duplicate node");
        	}
        }
        
        for (NodeL vertex: this.adjacencyList.keySet()) {
        	for (Edge<NodeL, EdgeW> link: this.adjacencyList.get(vertex)) {
        		if (!edges.add(link)) {
        			throw new RuntimeException("Failed rep check as there is a duplicate edge");
        		}
        	}
        }
    }
	
	public int getNumOfNodes() {
		return this.numOfNodes;
	}
	// requires vertex is not null
	public boolean addNode(NodeL vertex) {
		if (this.adjacencyList.put(vertex, new HashSet<Edge<NodeL, EdgeW>>()) == null) {
			this.numOfNodes++;
			// this.checkRep();
			return true;
		} else {
			// this.checkRep();
			return false;
		}
	}
	// requires link is not null
	public boolean addEdge(Edge<NodeL, EdgeW> link) {
		if (this.adjacencyList.get(link.getSource()) == null || this.adjacencyList.get(link.getDestination()) == null) {
			// this.checkRep();
			return false;
		} 
		if (this.adjacencyList.get(link.getSource()).add(link)) {
			// this.checkRep();
			return true;
		} else {
			// this.checkRep();
			return false;
		}
	}
	
	public LinkedList<Edge<NodeL, EdgeW>> getChildren(NodeL vertex) {
		LinkedList<Edge<NodeL, EdgeW>> children = new LinkedList<Edge<NodeL, EdgeW>>();
		if (this.adjacencyList.get(vertex) == null) {
			return children;
		}
		for (Edge<NodeL, EdgeW> i: this.adjacencyList.get(vertex)) {
			children.add(i);
		}
		return children;
	}
	
	public LinkedList<NodeL> getNodes() {
		LinkedList<NodeL> vertices = new LinkedList<NodeL>();
		for (NodeL vertex: this.adjacencyList.keySet()) {
			vertices.add(vertex);
		}
		return vertices;
	}
	
    /**
	 * @param: node1 source node
	 * @param: node2 destination node
	 * @requires: None
	 * @modifies: None
	 * @effects: None
	 * @throws: None
	 * @returns: shortest path from node1 to node2 if it exists or appropriate message if path or nodes don't exist
	 */
    public String findPath(NodeL node1, NodeL node2) {
    	if (node1 instanceof String && node2 instanceof String) {
    		Set<NodeL> chars = new HashSet<NodeL>();
    		chars = adjacencyList.keySet();
	    	if (!chars.contains(node1) && !chars.contains(node2) && node1 != node2) {
	            return String.format("unknown character %s\nunknown character %s\n", node1,node2);
	        } else if (!chars.contains(node1)) {
	            return String.format("unknown character %s\n", node1);
	        } else if(!chars.contains(node2)) {
	        	return String.format("unknown character %s\n", node2);
	        } else {
	        	Map<String, Double> distances = new HashMap<String, Double>();
	            PriorityQueue<String> active = new PriorityQueue<String>((v1, v2) -> Double.compare(distances.get(v1), distances.get(v2)));
	            HashSet<String> finished = new HashSet<String>();
	            LinkedList<NodeL> nodes = getNodes();
	            Map<String, String> pathsTracker = new HashMap<String, String>();
	            pathsTracker.put((String)node1, "path from " + node1 + " to " + node2 + ":\n");
	            
	            for (NodeL node: nodes) {
	                if (node.equals(node1)) {
	                    distances.put((String)node, 0.0);
	                    active.add((String)node);
	                } else {
	                    distances.put((String)node, Double.MAX_VALUE);
	                }
	            }
	            
	            while (!active.isEmpty()) {
	                String currNode = active.remove();
	                if (currNode.equals(node2)) {
	                    return pathsTracker.get(node2) + String.format("total cost: %.3f\n", distances.get(node2));
	                } else {
	                	Set<Edge<String, Double>> edges = adjacencyList.keySet();
	                	for (Edge<String, Double> edge: edges) {
	                		if (!finished.contains(edge.getDestination())) {
		                        if (distances.get(edge.getDestination()) > distances.get(currNode) + edge.getLabel()) {
		                            distances.put(edge.getDestination(), distances.get(currNode) + edge.getLabel());
		                            active.add(edge.getDestination());
		                            pathsTracker.put(edge.getDestination(), pathsTracker.get(currNode) + currNode + " to " + edge.getDestination() + String.format(" with weight %.3f\n", edge.getLabel()));
		                        }
	                		}
	                    }
	                }
	                finished.add(currNode);
	            }
	        	return String.format("path from " + node1 + " to " + node2 + ":\nno path found\n");
	        }
    	} else {
    		System.out.println("not implemented yet");
    		return "";
    	}
    }
}



