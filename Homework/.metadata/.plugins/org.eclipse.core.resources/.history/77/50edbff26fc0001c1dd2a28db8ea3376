package hw6;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;

import hw4.Edge;
import hw4.Graph;
import hw5.MarvelParser;
import javafx.util.Pair;

public class MarvelPaths2 {
     /**
     * This represents a graph of marvel charachtesrs that supports finiding the
     * shortest path from charachter to characer
     * Abstraction function
     * It is a graph with charachters as nodes and edges that consist of the book as
     * the label
     * Rep Invariant
     * h!=null && chars!=null
     */
    private Graph<String,Double> marvelGraph2;
    Set<String> chars;
    
    public Graph<String, Double>() {
    	marvelGraph2 = new Graph<String, Double>();
    }

    public void checkrep() {
        if (marvelGraph2 == null || chars == null) {
        	throw new RuntimeException("Failed rep check as MarvelPaths2 graph is empty.");
        }
    }

    /**
     * @param: filename The path to a "CSV" file that contains the
     *                  "character","book" pairs
     * @requires: filename != null
     * @modifies: h, chars
     * @effects: Makes a graph wraper out of a csv file.
     * @returns: None
     */
    /*
    public void createNewGraph(String filename) {
        Map<String, Set<String>> charsInBooks = new HashMap<String, Set<String>>();
        Map<String, Map<String,Integer>> edgMap=new HashMap<String, Map<String,Integer>>();
        chars = new HashSet<String>();
        try {
            MarvelParser.readData(filename, charsInBooks, chars);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Graph<String,Double> g = new Graph<String,Double>();
        for (String name : chars) {
            g.addNode(name);
            edgMap.put(name,new HashMap<String,Integer>());
        }
        for (String name : charsInBooks.keySet()) {
            Object[] value = charsInBooks.get(name).toArray();
            for (int i = 0; i < value.length; i++) {
                for (int j = 0; j < value.length; j++) {
                    if(i==j){
                        continue;
                    }
                    Map<String,Integer> tmp=edgMap.get(value[i]);
                    if(tmp.get(value[j])!=null){
                        tmp.put((String)value[j], tmp.get(value[j])+1);
                    }
                    else{
                        tmp.put((String)value[j], 1);
                    }
                }

            }
        }
        for(String start: edgMap.keySet()){
            Map<String,Integer> tmp=edgMap.get(start);
            for(String val: tmp.keySet()){
                Edge<String,Double> nEdge=new Edge<String,Double>(start, val, 1/(double)tmp.get(val));
                g.addEdge(nEdge);
            }
        } 
        this.marvelGraph2=g;
        checkrep();
    }
    */
    
    public void createNewGraph(String filename) {
    	Graph<String, Double> marvelGraphDouble = new Graph<String, Double>();
    	Map<String, Set<String>> charsInBooks = new HashMap<String, Set<String>>();
    	Map<String, Map<String, Integer>> edgeFrequencies = new HashMap<String, Map<String, Integer>>();
        chars = new HashSet<String>();
        
        try {
            MarvelParser.readData(filename, charsInBooks, chars);
        } catch (IOException e) {
            e.printStackTrace();
        }
        
		for (String character: chars) {
			marvelGraphDouble.addNode(character);
			edgeFrequencies.put(character, new HashMap<String, Integer>());
		}
		
		for (String book: charsInBooks.keySet()) {
            Set<String> characters = charsInBooks.get(book);
            for (String character: characters) {
            	for (String character2: characters) {
            		if (!character.equals(character2)) {
            			Map<String, Integer> retrieval = edgeFrequencies.get(character);
            			if (retrieval.get(character2) != null) {
            				retrieval.put(character2, retrieval.get(character2) + 1);
            			} else {
            				retrieval.put(character2, 1);
            			}
            		}
            	}
            }
		}

		for (String parentNode: edgeFrequencies.keySet()) {
			marvelGraphDouble.add
		}
		
        this.marvelGraph2 = marvelGraphDouble;
        this.checkrep();
    }

    /**
     * @param: node1 a string that represent the starting node
     * @param: node2 a string that represent the ending node
     * @requires: node1 != null && node2 != null
     * 
     * @modifies: none
     * @effects: returns path from node1 to node2
     * @returns: A string representing the path
     */
    public String findPath(String node1, String node2) {
        if (!this.chars.contains(node1) && !this.chars.contains(node2) && node1 != node2) {
            return String.format("unknown character %s\nunknown character %s\n", node1.trim(), node2.trim());
        }
        if (!this.chars.contains(node1)) {
            return "unknown character " + node1 + "\n";
        }
        if (!this.chars.contains(node2)) {
            return "unknown character " + node2 + "\n";
        }
        Map<String,Double> dist=new HashMap<String,Double>();
        PriorityQueue<String> pq = new PriorityQueue<String>((v1, v2) -> Double.compare(dist.get(v1), dist.get(v2)));
        LinkedList<String> tmp=this.marvelGraph2.getNodes();
        Map<String,String> path=new HashMap<String,String>();
        path.put(node1, "path from " + node1 + " to " + node2 + ":\n");
        for(String name: tmp){
            if(name.equals(node1)){
                dist.put(name, 0.0);
                pq.add(name);
            }
            else{
                dist.put(name, Double.MAX_VALUE);
            }
        }
        while(!pq.isEmpty()){
            String current_node=pq.poll();
            LinkedList<Edge<String,Double>> children= this.marvelGraph2.getChildren(current_node);
            if(current_node.equals(node2)){
                return path.get(node2) + String.format("total cost: %.3f\n", dist.get(node2));
            }
            for(Edge<String,Double> i: children){
                if(dist.get(i.getDestination())!=null && dist.get(i.getDestination())>dist.get(current_node)+i.getLabel()){
                    dist.put(i.getDestination(), dist.get(current_node)+i.getLabel());
                    pq.add(i.getDestination());
                    path.put(i.getDestination(), path.get(current_node)+String.format("%s to %s with weight %.3f\n", current_node,i.getDestination(),i.getLabel()));
                }
            }
        }
        return "path from " + node1 + " to " + node2 + ":\n" + "no path found\n";
    }
    
	public static void main(String[] arg) {

		String file = arg[0];
		
		try {
			Map<String, Set<String>> charsInBooks = new HashMap<String, Set<String>>();
			Set<String> chars = new HashSet<String>();
			MarvelParser.readData(file, charsInBooks, chars);
			System.out.println(
					"Read " + chars.size() + " characters who appear in " + charsInBooks.keySet().size() + " books.");
			MarvelPaths2 marvelGraph = new MarvelPaths2();
			marvelGraph.createNewGraph(file);
			MarvelPaths2 Example=new MarvelPaths2();
	        Example.createNewGraph(file);
	        System.out.println(Example.findPath("PETERS, SHANA TOC", "SEERESS"));
	        System.out.println(Example.findPath("GOOM", "HOFFMAN"));
	        System.out.println(Example.findPath("BATMAN", "CAPTAIN AMERICA"));
	        System.out.println(Example.findPath("BATMAN", "GREEN LANTERN"));
	        System.out.println(Example.findPath("SEERESS", "SEERESS"));
	        System.out.println(Example.findPath("BATMAN", "BATMAN"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}