package hw4;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.Iterator;

import org.junit.Test;

public final class GraphTest {
    @Test
    public void ConstructorTest() {
        Graph graph1 = new Graph();
        assertEquals(graph1.getNumOfNodes(), 0);
        assertFalse(graph1.getNodes().hasNext());
    }
    @Test
    public void addNodeTest() {
        Graph graph1 = new Graph();
        graph1.addNode(new Node("hello"));
        assertEquals(graph1.getNumOfNodes(), 1);
        assertTrue(graph1.getNodes().hasNext());
        assertEquals(graph1.getNodes().next(), "hello");
        assertFalse(graph1.addNode(new Node("hello")));
    }
    @Test
    public void LexographicOrderTest() {
        Graph graph1 = new Graph();
        Node node1 = new Node("b");
        Node node2 = new Node("c");
        Node node3 = new Node("a");
        graph1.addNode(node1);
        graph1.addNode(node2);
        graph1.addNode(node3);
        assertEquals(graph1.getNumOfNodes(), 3);
        assertTrue(graph1.getNodes().hasNext());
        Iterator<String> itr = graph1.getNodes();
        assertEquals(itr.next(), "a");
        assertEquals(itr.next(), "b");
        assertEquals(itr.next(), "c");
    }
    @Test
    public void addChildrenTest() {
        Graph graph1 = new Graph();
        Node node1 = new Node("b");
        Node node2 = new Node("c");
        Node node3 = new Node("a");
        graph1.addNode(node1);
        graph1.addNode(node2);
        graph1.addNode(node3);
        Edge edge1 = new Edge("a", "b", "7");
        Edge edge2 = new Edge("a", "c", "9");
        Edge edge3 = new Edge("a", "b", "4");
        Edge edge4 = new Edge("a", "b", "7");
        assertTrue(graph1.addEdge(edge1));
        assertTrue(graph1.addEdge(edge2));
        assertTrue(graph1.addEdge(edge3));
        assertTrue(edge1.equals(edge4));
        assertFalse(graph1.addEdge(edge4));
        Iterator<String> itr = graph1.getChildren(node3);
        assertEquals(itr.next(), "b(4)");
        assertEquals(itr.next(), "b(7)");
        assertEquals(itr.next(), "c(9)");
        assertFalse(itr.hasNext());
        assertFalse(graph1.getChildren(node2).hasNext());
    }

}
